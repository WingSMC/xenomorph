{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "xenomorph",
    "patterns": [
        { "include": "#comments" },
        { "include": "#type-declarations" },
        { "include": "#annotations" },
        { "include": "#keywords" },
        { "include": "#field-access" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#regex" },
        { "include": "#operators" },
        { "include": "#object-definition" },
        { "include": "#object-properties" },
        { "include": "#type-references" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.xenomorph",
                    "match": "//.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.xenomorph",
                    "match": "\\b(type|set|enum|validator)\\b"
                },
                {
                    "name": "constant.language.boolean.xenomorph",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "type-declarations": {
            "patterns": [
                {
                    "match": "\\b(type)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(=)",
                    "captures": {
                        "1": { "name": "keyword.control.xenomorph" },
                        "2": {
                            "name": "entity.name.type.declaration.xenomorph"
                        },
                        "3": { "name": "keyword.operator.assignment.xenomorph" }
                    }
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "begin": "@(if|elseif|else)\\s*(\\()?",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.conditional.xenomorph"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.begin.xenomorph"
                        }
                    },
                    "end": "\\)?",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.xenomorph"
                        }
                    },
                    "patterns": [{ "include": "#expressions" }]
                },
                {
                    "begin": "@([A-Za-z_][A-Za-z0-9_]*)(\\()?",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.annotation.xenomorph"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.begin.xenomorph"
                        }
                    },
                    "end": "\\)?",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.xenomorph"
                        }
                    },
                    "patterns": [{ "include": "#expressions" }]
                }
            ]
        },
        "field-access": {
            "patterns": [
                {
                    "match": "\\$(\\w+)",
                    "captures": {
                        "1": { "name": "variable.other.property.xenomorph" }
                    }
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.xenomorph",
                    "match": "\\+|\\-|\\*"
                },
                {
                    "name": "keyword.operator.logical.xenomorph",
                    "match": "&|\\||!|\\^|\\bnot\\b"
                },
                {
                    "name": "keyword.operator.comparison.xenomorph",
                    "match": "=|!="
                },
                {
                    "name": "keyword.operator.range.xenomorph",
                    "match": "\\.\\.|\\.<|<\\."
                },
                {
                    "name": "keyword.operator.set.xenomorph",
                    "match": "\\\\|<>"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.xenomorph",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.xenomorph",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.xenomorph",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.float.xenomorph",
                    "match": "\\b[0-9]+\\.[0-9]+\\b"
                }
            ]
        },
        "regex": {
            "name": "string.regexp.xenomorph",
            "begin": "/(?![\\s*/])",
            "end": "/",
            "patterns": [
                {
                    "name": "constant.character.escape.regexp.xenomorph",
                    "match": "\\\\."
                }
            ]
        },
        "object-definition": {
            "patterns": [
                {
                    "begin": "{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.begin.xenomorph"
                        }
                    },
                    "end": "}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.end.xenomorph"
                        }
                    },
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#object-properties" },
                        { "include": "#expressions" }
                    ]
                }
            ]
        },
        "object-properties": {
            "patterns": [
                {
                    "match": "([A-Za-z_][A-Za-z0-9_]*)\\s*(:)",
                    "captures": {
                        "1": { "name": "variable.object.property.xenomorph" },
                        "2": {
                            "name": "punctuation.separator.key-value.xenomorph"
                        }
                    }
                }
            ]
        },
        "type-references": {
            "patterns": [
                {
                    "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
                    "name": "support.type.xenomorph"
                },
                {
                    "match": "\\b(string|u8|u64|bool|float|Date)\\b",
                    "name": "support.type.primitive.xenomorph"
                }
            ]
        },
        "array-notation": {
            "patterns": [
                {
                    "begin": "\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.array.begin.xenomorph"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.array.end.xenomorph"
                        }
                    },
                    "patterns": [{ "include": "#expressions" }]
                }
            ]
        },
        "expressions": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#strings" },
                { "include": "#numbers" },
                { "include": "#keywords" },
                { "include": "#annotations" },
                { "include": "#field-access" },
                { "include": "#operators" },
                { "include": "#regex" },
                { "include": "#object-definition" },
                { "include": "#array-notation" },
                { "include": "#type-references" }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.statement.xenomorph",
                    "match": ";"
                },
                {
                    "name": "punctuation.separator.parameter.xenomorph",
                    "match": ","
                }
            ]
        }
    },
    "scopeName": "source.xenomorph"
}
